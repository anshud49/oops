#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

class Person
{

public:
    string name;
    int age, a;
    static int count1;
    static int count2;

    Person(int a) : a(a)
    {
    }

    virtual void getdata()
    {
    }
    virtual void putdata()
    {
    }
};

class Professor : public Person
{
private:
    int publications, cur_id = 0;
    int p = 1;

public:
    Professor() : Person(p)
    {
        count1++;
    }
    void getdata()
    {

        cin >> name;
        cin >> age;
        (cur_id = +count1);
        cin >> publications;
    }

    void putdata()
    {
        cout << name << " ";
        cout << age << " ";
        cout << publications << " ";
        cout << (cur_id) << endl;
    }
};

class Student : public Person
{
private:
    int marks[6], cur_id = 0;
    int sum = 0;
    int s = 1;

public:
    Student() : Person(s)
    {
        count2++;
    }
    void getdata()
    {
        cin >> name;
        cin >> age;
        cur_id += count2;
        for (int i = 0; i < 6; i++)
        {
            cin >> marks[i];
            sum += marks[i];
        }
    }

    void putdata()
    {
        cout << name << " ";
        cout << age << " ";
        cout << sum << " ";

        cout << (cur_id) << endl;
    }
};

int Person ::count1 = 0;
int Person ::count2 = 0;

int main()
{

    int n, val;
    cin >> n; // The number of objects that is going to be created.
    Person *per[n];

    for (int i = 0; i < n; i++)
    {

        cin >> val;
        if (val == 1)
        {
            // If val is 1 current object is of type Professor
            per[i] = new Professor;
        }
        else
            per[i] = new Student; // Else the current object is of type Student

        per[i]->getdata(); // Get the data from the user.
    }

    for (int i = 0; i < n; i++)
        per[i]->putdata(); // Print the required output for each object.

    return 0;
}
